[{"path":[]},{"path":[]},{"path":"/CHANGELOG.html","id":"added","dir":"","previous_headings":"0.1.1 - 2023-08-14","what":"Added","title":"Changelog","text":"Add citation file R (CITATION) GitHub (CITATION.cff) Add CHANGELOG.md (Common Changelog)","code":""},{"path":"/CHANGELOG.html","id":"changed","dir":"","previous_headings":"0.1.1 - 2023-08-14","what":"Changed","title":"Changelog","text":"Improve package description according CRAN recommendations","code":""},{"path":"/CHANGELOG.html","id":"id_010---2023-05-06","dir":"","previous_headings":"","what":"0.1.0 - 2023-05-06","title":"Changelog","text":"üå± Initial release tested code.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright ¬© 2007 Free Software Foundation, Inc.¬†<http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program‚Äìmake sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers‚Äô authors‚Äô protection, GPL clearly explains warranty free software. users‚Äô authors‚Äô sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users‚Äô freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"‚ÄúLicense‚Äù refers version 3 GNU General Public License. ‚ÄúCopyright‚Äù also means copyright-like laws apply kinds works, semiconductor masks. ‚ÄúProgram‚Äù refers copyrightable work licensed License. licensee addressed ‚Äú‚Äù. ‚ÄúLicensees‚Äù ‚Äúrecipients‚Äù may individuals organizations. ‚Äúmodify‚Äù work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called ‚Äúmodified version‚Äù earlier work work ‚Äúbased ‚Äù earlier work. ‚Äúcovered work‚Äù means either unmodified Program work based Program. ‚Äúpropagate‚Äù work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. ‚Äúconvey‚Äù work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays ‚ÄúAppropriate Legal Notices‚Äù extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"‚Äúsource code‚Äù work means preferred form work making modifications . ‚ÄúObject code‚Äù means non-source form work. ‚ÄúStandard Interface‚Äù means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. ‚ÄúSystem Libraries‚Äù executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. ‚ÄúMajor Component‚Äù, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . ‚ÄúCorresponding Source‚Äù work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work‚Äôs System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users‚Äô Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work‚Äôs users, third parties‚Äô legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program‚Äôs source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 ‚Äúkeep intact notices‚Äù. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called ‚Äúaggregate‚Äù compilation resulting copyright used limit access legal rights compilation‚Äôs users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. ‚ÄúUser Product‚Äù either (1) ‚Äúconsumer product‚Äù, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, ‚Äúnormally used‚Äù refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. ‚ÄúInstallation Information‚Äù User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"‚ÄúAdditional permissions‚Äù terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered ‚Äúrestrictions‚Äù within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. ‚Äúentity transaction‚Äù transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party‚Äôs predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"‚Äúcontributor‚Äù copyright holder authorizes use License Program work Program based. work thus licensed called contributor‚Äôs ‚Äúcontributor version‚Äù. contributor‚Äôs ‚Äúessential patent claims‚Äù patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, ‚Äúcontrol‚Äù includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor‚Äôs essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, ‚Äúpatent license‚Äù express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). ‚Äúgrant‚Äù patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. ‚ÄúKnowingly relying‚Äù means actual knowledge , patent license, conveying covered work country, recipient‚Äôs use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license ‚Äúdiscriminatory‚Äù include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others‚Äô Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License ‚Äúlater version‚Äù applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy‚Äôs public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM ‚Äú‚Äù WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least ‚Äúcopyright‚Äù line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program‚Äôs commands might different; GUI interface, use ‚Äúbox‚Äù. also get employer (work programmer) school, , sign ‚Äúcopyright disclaimer‚Äù program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"/articles/a-import-data-from-bruker-maldi-biotyper.html","id":"importing-a-single-report","dir":"Articles","previous_headings":"Importing generated reports from the Bruker MALDI Biotyper device","what":"Importing a single report","title":"A-import-data-from-bruker-maldi-biotyper","text":"Bruker MALDI Biotyper generates report via Compass software summarizing identification microorganisms using internal database. file separated semi-colons, contains headers. report many columns wide format describe ten hits identification feasible, identification possible. --, makes table import R manipulation relatively painful. example import single Bruker MALDI Biotyper report {tibble}. default, best hit colony reported. hits can reported well, long format (long_format = TRUE), explorations {tidyverse} suite.","code":"# Get a example Bruker report biotyper <- system.file(\"biotyper.csv\", package = \"maldipickr\") # Import the report as a tibble report_tibble <- read_biotyper_report(biotyper) # Display the tibble report_tibble #> # A tibble: 3 √ó 8 #>   spot    sample_name hit_rank bruker_quality bruker_species        bruker_taxid #>   <chr>   <chr>          <int> <chr>          <chr>                        <dbl> #> 1 targetA NA                 1 -              not reliable identif‚Ä¶           NA #> 2 targetB NA                 1 +++            Escherichia coli               562 #> 3 targetC NA                 1 +++            Kosakonia cowanii           208223 #> # ‚Ñπ 2 more variables: bruker_hash <chr>, bruker_log <dbl>"},{"path":"/articles/a-import-data-from-bruker-maldi-biotyper.html","id":"importing-multiple-reports","dir":"Articles","previous_headings":"Importing generated reports from the Bruker MALDI Biotyper device","what":"Importing multiple reports","title":"A-import-data-from-bruker-maldi-biotyper","text":"large-scale analysis, batches identification run can easily imported using read_many_biotyper_reports function along custom-made metadata. example usage, one report artificially extended multiple reports.","code":"# List of Bruker MALDI Biotyper reports reports_paths <- system.file(   c(\"biotyper.csv\", \"biotyper.csv\", \"biotyper.csv\"),   package = \"maldipickr\" ) # Read the list of reports and combine them in a single tibble read_many_biotyper_reports(   reports_paths,   report_ids = c(\"first\", \"second\", \"third\"),   # Additional metadata below are passed to dplyr::mutate   growth_temperature = 37.0 ) #> # A tibble: 9 √ó 10 #>   name     spot  sample_name hit_rank bruker_quality bruker_species bruker_taxid #>   <chr>    <chr> <chr>          <int> <chr>          <chr>                 <dbl> #> 1 first_t‚Ä¶ targ‚Ä¶ NA                 1 -              not reliable ‚Ä¶           NA #> 2 first_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Escherichia c‚Ä¶          562 #> 3 first_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Kosakonia cow‚Ä¶       208223 #> 4 second_‚Ä¶ targ‚Ä¶ NA                 1 -              not reliable ‚Ä¶           NA #> 5 second_‚Ä¶ targ‚Ä¶ NA                 1 +++            Escherichia c‚Ä¶          562 #> 6 second_‚Ä¶ targ‚Ä¶ NA                 1 +++            Kosakonia cow‚Ä¶       208223 #> 7 third_t‚Ä¶ targ‚Ä¶ NA                 1 -              not reliable ‚Ä¶           NA #> 8 third_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Escherichia c‚Ä¶          562 #> 9 third_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Kosakonia cow‚Ä¶       208223 #> # ‚Ñπ 3 more variables: bruker_hash <chr>, bruker_log <dbl>, #> #   growth_temperature <dbl>"},{"path":"/articles/a-import-data-from-bruker-maldi-biotyper.html","id":"importing-spectra-from-the-bruker-maldi-biotyper-device","dir":"Articles","previous_headings":"","what":"Importing spectra from the Bruker MALDI Biotyper device","title":"A-import-data-from-bruker-maldi-biotyper","text":"identification reports, Bruker MALDI Biotyper device outputs raw data used identification (database) form mass spectra. Thankfully, {MALDIquant} {readBrukerFlexData} packages help users import manipulate data R.","code":""},{"path":"/articles/a-import-data-from-bruker-maldi-biotyper.html","id":"importing-multiple-spectra-from-a-directory-hierarchy","dir":"Articles","previous_headings":"Importing spectra from the Bruker MALDI Biotyper device","what":"Importing multiple spectra from a directory hierarchy","title":"A-import-data-from-bruker-maldi-biotyper","text":"However, Bruker MALDI Biotyper device produces acqus files (instead native acqu files), readBrukerFlexDir() function {readBrukerFlexData} package fail following error message: following import_biotyper_spectra()) function used example circumvent error creating symbolic link conveniently helps removing calibration samples. toy dataset bundled package subset dataset {MALDIquantExamples} package consist six spectra: * 1 replicate species 1 * 2 replicates species 2 * 3 replicates species 3","code":"Error in .readAcquFile(fidFile = fidFile, verbose = verbose) : File ‚Äò/data/maldi_dir/targetA/0_D10/1/1SLin/acqu‚Äô doesn't exists! # Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Display the list of spectra spectra_list #> [[1]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1962.222 - 20146.522 #> Range of intensity values: 2.4e+02 - 3.608e+04  #> Memory usage             : 337.047 KiB          #> Name                     : species1.G2          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species1/0_G2/1/1SLin/fid #>  #> [[2]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1962.222 - 20146.522 #> Range of intensity values: 1.82e+02 - 1.006e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species2.E11         #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species2/0_E11/1/1SLin/fid #>  #> [[3]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1962.222 - 20146.522 #> Range of intensity values: 3.25e+02 - 2.115e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species2.E12         #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species2/0_E12/1/1SLin/fid #>  #> [[4]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1961.215 - 20135.904 #> Range of intensity values: 1.94e+02 - 2.055e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species3.F7          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species3/0_F7/1/1SLin/fid #>  #> [[5]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1961.215 - 20135.904 #> Range of intensity values: 1.6e+02 - 1.814e+04  #> Memory usage             : 337.047 KiB          #> Name                     : species3.F8          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species3/0_F8/1/1SLin/fid #>  #> [[6]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1961.215 - 20135.904 #> Range of intensity values: 1.59e+02 - 1.449e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species3.F9          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species3/0_F9/1/1SLin/fid"},{"path":"/articles/a-import-data-from-bruker-maldi-biotyper.html","id":"evaluate-the-quality-of-the-spectra","dir":"Articles","previous_headings":"Importing spectra from the Bruker MALDI Biotyper device","what":"Evaluate the quality of the spectra","title":"A-import-data-from-bruker-maldi-biotyper","text":"spectra imported, check_spectra() function can easily assess whether spectra list empty, length correspond profile data. spectra satisfy criteria, function exit warning indicate faulty spectra. Either way, function outputs list logical vectors (TRUE FALSE) indicating whether spectra empty (is_empty), odd length (is_outlier_length) profile spectra (is_not_regular).","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Display the list of checks, with FALSE where no anomaly is detected check_spectra(spectra_list) #> $is_empty #> [1] FALSE FALSE FALSE FALSE FALSE FALSE #>  #> $is_outlier_length #> [1] FALSE FALSE FALSE FALSE FALSE FALSE #>  #> $is_not_regular #> [1] FALSE FALSE FALSE FALSE FALSE FALSE # The overall sanity can be checked with Reduce Reduce(any, check_spectra(spectra_list)) # Should be FALSE #> [1] FALSE"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"process-bruker-maldi-biotyper-spectra","dir":"Articles","previous_headings":"","what":"Process Bruker MALDI Biotyper spectra","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"imported raw data Bruker MALDI Biotyper, processing spectra based original implementation, run following tasks: Square-root transformation Mass range trimming 4-10 kDa deemed determinant Strejcek et al.¬†(2018) Signal smoothing using Savitzky-Golay method half window size 20 Baseline correction SNIP procedure Normalisation Total Ion Current Peak detection using SuperSmoother procedure signal--noise ratio 3 Peak filtering. step added discard peaks negative signal--noise ratio probably due edge mass range. full procedure illustrated example . case, resulting processed spectra, peaks final spectra metadata stored -memory, process_spectra() function enables storing files locally scalable high-throughput analyses.","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Transform the spectra signals according to Strejcek et al. (2018) processed <- process_spectra(spectra_list) # Overview of the list architecture that is returned #  with the list of processed spectra, peaks identified and the #  metadata table str(processed, max.level = 2) #> List of 3 #>  $ spectra :List of 6 #>   ..$ species1_G2 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species2_E11:Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species2_E12:Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species3_F7 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species3_F8 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species3_F9 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>  $ peaks   :List of 6 #>   ..$ species1_G2 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species2_E11:Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species2_E12:Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species3_F7 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species3_F8 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species3_F9 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>  $ metadata: tibble [6 √ó 3] (S3: tbl_df/tbl/data.frame) # A detailed view of the metadata with the median signal-to-noise #  ratio (SNR) and the number of peaks processed$metadata #> # A tibble: 6 √ó 3 #>   name           SNR peaks #>   <chr>        <dbl> <dbl> #> 1 species1_G2   5.09    21 #> 2 species2_E11  5.54    22 #> 3 species2_E12  5.63    23 #> 4 species3_F7   4.89    26 #> 5 species3_F8   5.56    25 #> 6 species3_F9   5.40    25"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"merge-multiple-processed-spectra","dir":"Articles","previous_headings":"","what":"Merge multiple processed spectra","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"high-throughput analyses, multiples runs Bruker MALDI Biotyper expected resulting several batches spectra processed compared. processing natively independent, natively run parallel, integration batches comparison needs additional step. merge_processed_spectra() function aggregates processed spectra bins together detected peaks, tolerance \\(0.002\\) average peak values bin (see MALDIquant::binPeaks), translate tolerance 2000 ppm. binning step results \\(n\\times p\\) feature matrix (intensity matrix), \\(n\\) rows \\(n\\) processed spectra (peakless spectra discarded) \\(p\\) columns \\(p\\) peaks masses. default, Strejeck et al.¬†(2018) procedure, intensity values spectra missing peaks interpolated processed spectra signal. current function enables analyst decide whether interpolate values leave missing peaks NA converted null intensity value.","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Transform the spectra signals according to Strejcek et al. (2018) processed <- process_spectra(spectra_list) # Merge the spectra to produce the feature matrix fm <- merge_processed_spectra(list(processed)) # The feature matrix has 6 spectra as rows and #  35 peaks as columns dim(fm) #> [1]  6 35 # Notice the difference when the interpolation is turned off fm_no_interpolation <- merge_processed_spectra(   list(processed),   interpolate_missing = FALSE ) sum(fm == 0) # 0 #> [1] 0 sum(fm_no_interpolation == 0) # 68 #> [1] 68  # Multiple runs can be aggregated using list() # Merge the spectra to produce the feature matrix fm_all <- merge_processed_spectra(list(processed, processed, processed)) # The feature matrix has 3√ó6=18 spectra as rows and #  35 peaks as columns dim(fm_all) #> [1] 18 35"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"compute-a-similarity-matrix-between-all-processed-spectra-not-included","dir":"Articles","previous_headings":"","what":"Compute a similarity matrix between all processed spectra (not included)","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"batches spectra processed together, can use distance metric evaluate close spectra one another. Strejcek et al. (2018) recommend cosine metric compare spectra use fast implementation {coop} package. provide specific functions generate similarity matrix, illustrate can easily computed. Note feature matrix merge_processed_spectra() spectra rows peaks values columns. get similarity matrix spectra, feature matrix must transposed cosine computation.","code":"# A. Compute the similarity matrix on the transposed feature matrix  #   using Pearson correlation coefficient  sim_matrix <- stats::cor( t(fm), method = \"pearson)   # B.1 Install the coop package  # install.packages(\"coop\")  # B.2 Compute the similarity matrix on the transposed feature matrix  sim_matrix <- coop::cosine( t(fm) )"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"delineate-clusters-from-a-similarity-matrix","dir":"Articles","previous_headings":"","what":"Delineate clusters from a similarity matrix","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"similarity matrix computed pairs studied spectra, next step delineate clusters spectra dereplicate measured bacterial colonies. similarity_to_clusters()) agnostic similarity metric used, whether cosine metric Pearson product moment, provided numeric threshold relevant metric used given, two spectra considered similar. Indeed, matrix transformed network without loops, nodes spectra links exist spectra similarity spectra (equal ) threshold. representation allows infer clusters. table summarises spectra, cluster number assigned size cluster, total number spectra cluster.","code":"# Toy similarity matrix between the six example spectra of #  three species. The cosine metric is used and a value of #  zero indicates dissimilar spectra and a value of one #  indicates identical spectra. cosine_similarity <- matrix(   c(     1, 0.79, 0.77, 0.99, 0.98, 0.98,     0.79, 1, 0.98, 0.79, 0.8, 0.8,     0.77, 0.98, 1, 0.77, 0.77, 0.77,     0.99, 0.79, 0.77, 1, 1, 0.99,     0.98, 0.8, 0.77, 1, 1, 1,     0.98, 0.8, 0.77, 0.99, 1, 1   ),   nrow = 6,   dimnames = list(     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     ),     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     )   ) ) # Delineate clusters based on a 0.92 threshold applied #  to the similarity matrix similarity_to_clusters(cosine_similarity, threshold = 0.92) #> # A tibble: 6 √ó 3 #>   name         membership cluster_size #>   <chr>             <int>        <int> #> 1 species1_G2           1            4 #> 2 species2_E11          2            2 #> 3 species2_E12          2            2 #> 4 species3_F7           1            4 #> 5 species3_F8           1            4 #> 6 species3_F9           1            4"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"set-a-reference-spectrum-for-each-cluster","dir":"Articles","previous_headings":"","what":"Set a reference spectrum for each cluster","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"table clusters generated similarity matrix, reference spectrum can assigned cluster. choose define high-quality spectra representative spectra clusters using internal information. , representative spectra , within cluster, highest median signal--noise ratio highest number detected peaks. function set_reference_spectra() change order cluster table merely adds additional column is_reference indicate whether corresponding spectrum representative cluster.","code":"# Get an example directory of six Bruker MALDI Biotyper spectra # Import the six spectra and # Transform the spectra signals according to Strejcek et al. (2018) processed <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) %>%   import_biotyper_spectra() %>%   suppressMessages() %>%   process_spectra()  # Toy similarity matrix between the six example spectra of #  three species. The cosine metric is used and a value of #  zero indicates dissimilar spectra and a value of one #  indicates identical spectra. cosine_similarity <- matrix(   c(     1, 0.79, 0.77, 0.99, 0.98, 0.98,     0.79, 1, 0.98, 0.79, 0.8, 0.8,     0.77, 0.98, 1, 0.77, 0.77, 0.77,     0.99, 0.79, 0.77, 1, 1, 0.99,     0.98, 0.8, 0.77, 1, 1, 1,     0.98, 0.8, 0.77, 0.99, 1, 1   ),   nrow = 6,   dimnames = list(     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     ),     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     )   ) ) # Delineate clusters based on a 0.92 threshold applied #  to the similarity matrix clusters <- similarity_to_clusters(   cosine_similarity,   threshold = 0.92 )  # Set reference spectra with the toy example set_reference_spectra(clusters, processed$metadata) #> # A tibble: 6 √ó 6 #>   name         membership cluster_size   SNR peaks is_reference #>   <chr>             <int>        <int> <dbl> <dbl> <lgl>        #> 1 species1_G2           1            4  5.09    21 FALSE        #> 2 species2_E11          2            2  5.54    22 FALSE        #> 3 species2_E12          2            2  5.63    23 TRUE         #> 4 species3_F7           1            4  4.89    26 FALSE        #> 5 species3_F8           1            4  5.56    25 TRUE         #> 6 species3_F9           1            4  5.40    25 FALSE"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"import-clusters-results-generated-by-spede","dir":"Articles","previous_headings":"","what":"Import clusters results generated by SPeDE","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"Raw spectra can also processed clustered another approach, named SPeDE, developed Dumolin et al.¬†(2019). resulting dereplication step produces comma separated table. example illustrates import table R consistent dereplication table generated within {maldipickr} package.","code":"# Reformat the output from SPeDE table # https://github.com/LM-UGent/SPeDE import_spede_clusters(   system.file(\"spede.csv\", package = \"maldipickr\") ) #> # A tibble: 6 √ó 5 #>   name         membership cluster_size quality is_reference #>   <chr>             <dbl>        <int> <chr>   <lgl>        #> 1 species1_G2           1            1 GREEN   TRUE         #> 2 species2_E11          2            2 ORANGE  FALSE        #> 3 species2_E12          2            2 GREEN   TRUE         #> 4 species3_F7           3            1 GREEN   TRUE         #> 5 species3_F8           4            2 ORANGE  FALSE        #> 6 species3_F9           4            2 GREEN   TRUE"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"cherry-pick-bruker-maldi-biotyper-spectra","dir":"Articles","previous_headings":"","what":"Cherry-pick Bruker MALDI Biotyper spectra","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"isolating bacteria environment, experimenters want thorough also work-, time- cost-savvy. One approach reduce redundancy bacterial isolates analyzing MALDI-TOF spectra Bruker Biotyper. steps previously described vignette consisted processing spectra able pick non-redundant spectra, using pick_spectra() function. function, illustrated examples , can pick spectra using different types inputs: reference spectra information present cluster table (using similarity_to_clusters() import_spede_clusters() functions; see example 1) external metadata table containing variable (e.g., optical density, fluorescence) maximized (default) minimized per cluster (see example 2) Spectra, clusters, can also excluded cherry-picking decision, procedure termed masking . distinguish two types mask implemented pick_spectra() function: soft mask discards spectra , correspond instance low-quality sample, negative control samples (see example 3) hard mask discards spectra clusters (see example 4). particularly useful spectra previously picked. instance, exclude colonies grown picked 24h streaking comparing colonies grown 72h. Advanced users can also provide directly cluster table custom sort cluster accommodate complex design. Ultimately, function delivers table many rows cluster table additional logical column named to_pick indicate whether colony associated spectra picked (TRUE) picked (FALSE).","code":"# 0. Load a toy example of a tibble of clusters created by #   the `similarity_to_clusters` function. clusters <- readRDS(   system.file(\"clusters_tibble.RDS\",     package = \"maldipickr\"   ) ) # 1. By default and if no other metadata are provided, #   the function picks reference spectra for each clusters. pick_spectra(clusters) #> # A tibble: 6 √ó 7 #>   name         membership cluster_size   SNR peaks is_reference to_pick #>   <chr>             <int>        <int> <dbl> <dbl> <lgl>        <lgl>   #> 1 species1_G2           1            4  5.09    21 FALSE        FALSE   #> 2 species2_E11          2            2  5.54    22 FALSE        FALSE   #> 3 species2_E12          2            2  5.63    23 TRUE         TRUE    #> 4 species3_F7           1            4  4.89    26 FALSE        FALSE   #> 5 species3_F8           1            4  5.56    25 TRUE         TRUE    #> 6 species3_F9           1            4  5.40    25 FALSE        FALSE  # 2.1 Simulate OD600 values with uniform distribution #  for each of the colonies we measured with #  the Bruker MALDI Biotyper set.seed(104) metadata <- dplyr::transmute(   clusters,   name = name, OD600 = runif(n = nrow(clusters)) ) metadata #> # A tibble: 6 √ó 2 #>   name         OD600 #>   <chr>        <dbl> #> 1 species1_G2  0.364 #> 2 species2_E11 0.772 #> 3 species2_E12 0.735 #> 4 species3_F7  0.973 #> 5 species3_F8  0.740 #> 6 species3_F9  0.201  # 2.2 Pick the spectra based on the highest #   OD600 value per cluster pick_spectra(clusters, metadata, \"OD600\") #> # A tibble: 6 √ó 8 #>   name         membership cluster_size   SNR peaks is_reference OD600 to_pick #>   <chr>             <int>        <int> <dbl> <dbl> <lgl>        <dbl> <lgl>   #> 1 species1_G2           1            4  5.09    21 FALSE        0.364 FALSE   #> 2 species2_E11          2            2  5.54    22 FALSE        0.772 TRUE    #> 3 species2_E12          2            2  5.63    23 TRUE         0.735 FALSE   #> 4 species3_F7           1            4  4.89    26 FALSE        0.973 TRUE    #> 5 species3_F8           1            4  5.56    25 TRUE         0.740 FALSE   #> 6 species3_F9           1            4  5.40    25 FALSE        0.201 FALSE  # 3.1 Say that the wells on the right side of the plate are #   used for negative controls and should not be picked. metadata <- metadata %>% dplyr::mutate(   well = gsub(\".*[A-Z]([0-9]{1,2}$)\", \"\\\\1\", name) %>%     strtoi(),   is_edge = is_well_on_edge(     well_number = well, plate_layout = 96, edges = \"right\"   ) )  # 3.2 Pick the spectra after discarding (or soft masking) #   the spectra indicated by the `is_edge` column. pick_spectra(clusters, metadata, \"OD600\",   soft_mask_column = \"is_edge\" ) #> # A tibble: 6 √ó 10 #>   name      membership cluster_size   SNR peaks is_reference OD600  well is_edge #>   <chr>          <int>        <int> <dbl> <dbl> <lgl>        <dbl> <int> <lgl>   #> 1 species1‚Ä¶          1            4  5.09    21 FALSE        0.364     2 FALSE   #> 2 species2‚Ä¶          2            2  5.54    22 FALSE        0.772    11 FALSE   #> 3 species2‚Ä¶          2            2  5.63    23 TRUE         0.735    12 TRUE    #> 4 species3‚Ä¶          1            4  4.89    26 FALSE        0.973     7 FALSE   #> 5 species3‚Ä¶          1            4  5.56    25 TRUE         0.740     8 FALSE   #> 6 species3‚Ä¶          1            4  5.40    25 FALSE        0.201     9 FALSE   #> # ‚Ñπ 1 more variable: to_pick <lgl>  # 4.1 Say that some spectra were picked before #   (e.g., in the column F) in a previous experiment. # We do not want to pick clusters with those spectra #   included to limit redundancy. metadata <- metadata %>% dplyr::mutate(   picked_before = grepl(\"_F\", name) ) # 4.2 Pick the spectra from clusters without spectra #   labelled as `picked_before` (hard masking). pick_spectra(clusters, metadata, \"OD600\",   hard_mask_column = \"picked_before\" ) #> # A tibble: 6 √ó 11 #>   name      membership cluster_size   SNR peaks is_reference OD600  well is_edge #>   <chr>          <int>        <int> <dbl> <dbl> <lgl>        <dbl> <int> <lgl>   #> 1 species1‚Ä¶          1            4  5.09    21 FALSE        0.364     2 FALSE   #> 2 species2‚Ä¶          2            2  5.54    22 FALSE        0.772    11 FALSE   #> 3 species2‚Ä¶          2            2  5.63    23 TRUE         0.735    12 TRUE    #> 4 species3‚Ä¶          1            4  4.89    26 FALSE        0.973     7 FALSE   #> 5 species3‚Ä¶          1            4  5.56    25 TRUE         0.740     8 FALSE   #> 6 species3‚Ä¶          1            4  5.40    25 FALSE        0.201     9 FALSE   #> # ‚Ñπ 2 more variables: picked_before <lgl>, to_pick <lgl>"},{"path":"/articles/b-dereplicate-bruker-maldi-biotyper-spectra.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"B-dereplicate-bruker-maldi-biotyper-spectra","text":"Dumolin C, Aerts M, Verheyde B, Schellaert S, Vandamme T, Van Der Jeugt F, De Canck E, Cnockaert M, Wieme AD, Cleenwerck , Peiren J, Dawyndt P, Vandamme P, & Carlier . (2019). ‚ÄúIntroducing SPeDE: High-Throughput Dereplication Accurate Determination Microbial Diversity Matrix-Assisted Laser Desorption‚ÄìIonization Time Flight Mass Spectrometry Data‚Äù. MSystems 4(5). doi:10.1128/msystems.00437-19. Strejcek M, Smrhova T, Junkova P & Uhlik O (2018). ‚ÄúWhole-Cell MALDI-TOF MS versus 16S rRNA Gene Analysis Identification Dereplication Recurrent Bacterial Isolates.‚Äù Frontiers Microbiology 9 doi:10.3389/fmicb.2018.01294.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Charlie Pauvert. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pauvert, C., Wylensek, D., N√ºchtern, S., & Clavel, T. (2023). maldipickr: Dereplicate Cherry-pick Mass Spectrometry Spectra R (Version 0.1.0) [Computer software]. https://github.com/ClavelLab/maldipickr","code":"@Manual{,   title = {maldipickr: Dereplicate And Cherry-pick Mass Spectrometry Spectra in R},   author = {Charlie Pauvert and David Wylensek and Selina N√ºchtern and Thomas Clavel},   year = {2023},   note = {https://clavellab.github.io/maldipickr, https://github.com/ClavelLab/maldipickr}, }"},{"path":"/index.html","id":"maldipickr-","dir":"","previous_headings":"","what":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","title":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","text":"goal {maldipickr} provide documented tested R functions dereplicate matrix-assisted laser desorption/ionization-time--flight (MALDI-TOF) data cherry-pick representative spectra.","code":""},{"path":"/index.html","id":"under-the-hood","dir":"","previous_headings":"","what":"Under the hood","title":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","text":"R package developed towards spectra generated Bruker MALDI Biotyper device. {maldipickr} package built suite Rmarkdown files using {fusen} package Rochette S (2023). relies : {MALDIquant} package Gibb & Strimmer (2012) spectra functions work Strejcek et al.¬†(2018) dereplication procedure.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","text":"can install development version {maldipickr} GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ClavelLab/maldipickr\", build_vignettes = TRUE)"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","text":"package provides functions : Import spectra (import_biotyper_spectra()) identification reports Bruker MALDI Biotyper R (read_biotyper_report()). Process, dereplicate (process_spectra() similarity_to_clusters()) cherry-pick representative spectra (pick_spectra()).","code":""},{"path":"/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","text":"developers package affiliated company Bruker, therefore package independent company distributed GPL-3.0 License. hexagonal logo created Charlie Pauvert uses Hack font color palette generated https://coolors.co.","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Dereplicate And Cherry-pick Mass Spectrometry Spectra","text":"Gibb S & Strimmer K (2012). ‚ÄúMALDIquant: versatile R package analysis mass spectrometry data‚Äù. Bioinformatics 28, 2270-2271. https://doi.org/10.1093/bioinformatics/bts447. Rochette S (2023). ‚Äúfusen: Build Package Rmarkdown Files‚Äù. https://thinkr-open.github.io/fusen/, https://github.com/Thinkr-open/fusen. Strejcek M, Smrhova T, Junkova P & Uhlik O (2012). ‚ÄúWhole-Cell MALDI-TOF MS versus 16S rRNA Gene Analysis Identification Dereplication Recurrent Bacterial Isolates.‚Äù Frontiers Microbiology 9 https://doi.org/10.3389/fmicb.2018.01294.","code":""},{"path":"/reference/check_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the spectra regularities ‚Äî check_spectra","title":"Evaluate the spectra regularities ‚Äî check_spectra","text":"Assess whether spectra list empty, length correspond profile data.","code":""},{"path":"/reference/check_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the spectra regularities ‚Äî check_spectra","text":"","code":"check_spectra(spectra_list)"},{"path":"/reference/check_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the spectra regularities ‚Äî check_spectra","text":"spectra_list list MALDIquant::MassSpectrum objects","code":""},{"path":"/reference/check_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the spectra regularities ‚Äî check_spectra","text":"list logical vectors length spectra_list indicating spectra empty (is_empty), odd length (is_outlier_length) profile spectra (is_not_regular).","code":""},{"path":[]},{"path":"/reference/check_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the spectra regularities ‚Äî check_spectra","text":"","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Display the list of checks, with FALSE where no anomaly is detected check_spectra(spectra_list) #> $is_empty #> [1] FALSE FALSE FALSE FALSE FALSE FALSE #>  #> $is_outlier_length #> [1] FALSE FALSE FALSE FALSE FALSE FALSE #>  #> $is_not_regular #> [1] FALSE FALSE FALSE FALSE FALSE FALSE #>  # The overall sanity can be checked with Reduce Reduce(any, check_spectra(spectra_list)) # Should be FALSE #> [1] FALSE"},{"path":"/reference/import_biotyper_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","title":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","text":"function wrapper around readBrukerFlexData::readBrukerFlexDir() read acqus acqu MALDI files.","code":""},{"path":"/reference/import_biotyper_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","text":"","code":"import_biotyper_spectra(   biotyper_directory,   remove_calibration = c(\"BTS\", \"Autocalibration\") )"},{"path":"/reference/import_biotyper_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","text":"biotyper_directory path folder tree spectra imported. remove_calibration vector characters used regex indicate (calibration) spectra going removed.","code":""},{"path":"/reference/import_biotyper_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","text":"list MALDIquant::MassSpectrum objects","code":""},{"path":"/reference/import_biotyper_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","text":"using readBrukerFlexData::readBrukerFlexDir() acqus files (instead native acqu files), function fail following error message:   turns acqu acqus files , function create acqu symbolic links point acqus files.","code":"Error in .readAcquFile(fidFile = fidFile, verbose = verbose) : File ‚Äò/data/maldi_dir/targetA/0_D10/1/1SLin/acqu‚Äô doesn't exists!"},{"path":[]},{"path":"/reference/import_biotyper_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Importing spectra from the Bruker MALDI Biotyper device ‚Äî import_biotyper_spectra","text":"","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Display the list of spectra spectra_list #> [[1]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1962.222 - 20146.522 #> Range of intensity values: 2.4e+02 - 3.608e+04  #> Memory usage             : 337.047 KiB          #> Name                     : species1.G2          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species1/0_G2/1/1SLin/fid #>  #> [[2]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1962.222 - 20146.522 #> Range of intensity values: 1.82e+02 - 1.006e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species2.E11         #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species2/0_E11/1/1SLin/fid #>  #> [[3]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1962.222 - 20146.522 #> Range of intensity values: 3.25e+02 - 2.115e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species2.E12         #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species2/0_E12/1/1SLin/fid #>  #> [[4]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1961.215 - 20135.904 #> Range of intensity values: 1.94e+02 - 2.055e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species3.F7          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species3/0_F7/1/1SLin/fid #>  #> [[5]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1961.215 - 20135.904 #> Range of intensity values: 1.6e+02 - 1.814e+04  #> Memory usage             : 337.047 KiB          #> Name                     : species3.F8          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species3/0_F8/1/1SLin/fid #>  #> [[6]] #> S4 class type            : MassSpectrum         #> Number of m/z values     : 20882                #> Range of m/z values      : 1961.215 - 20135.904 #> Range of intensity values: 1.59e+02 - 1.449e+04 #> Memory usage             : 337.047 KiB          #> Name                     : species3.F9          #> File                     : /home/runner/work/_temp/Library/maldipickr/toy-species-spectra/species3/0_F9/1/1SLin/fid #>"},{"path":"/reference/import_spede_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","title":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","text":"Reformat table output analysis raw Bruker MALDI Biotyper spectra SPeDE tool Dumolin et al. (2019) consistent Strejcek et al. (2018) procedure followed maldipickr package.","code":""},{"path":"/reference/import_spede_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","text":"","code":"import_spede_clusters(path)"},{"path":"/reference/import_spede_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","text":"path Path comma separated table generated SPeDE","code":""},{"path":"/reference/import_spede_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","text":"tibble following columns: name: character denoting spectra name (spaces, dashes dots replaced underscores \"_\" SPeDE) membership: integers stating cluster number spectra belong . starts 1 c, total number clusters. cluster_size: integers indicating total number spectra corresponding cluster. quality: character indicating spectra quality category SPeDE, GREEN, ORANGE RED. is_reference: logical indicating whether corresponding spectra reference spectra cluster.","code":""},{"path":"/reference/import_spede_clusters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","text":"Dumolin C, Aerts M, Verheyde B, Schellaert S, Vandamme T, Van Der Jeugt F, De Canck E, Cnockaert M, Wieme AD, Cleenwerck , Peiren J, Dawyndt P, Vandamme P, & Carlier . (2019). \"Introducing SPeDE: High-Throughput Dereplication Accurate Determination Microbial Diversity Matrix-Assisted Laser Desorption‚ÄìIonization Time Flight Mass Spectrometry Data\". MSystems 4(5). doi:10.1128/msystems.00437-19.","code":""},{"path":[]},{"path":"/reference/import_spede_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import clusters results generated by SPeDE ‚Äî import_spede_clusters","text":"","code":"# Reformat the output from SPeDE table # https://github.com/LM-UGent/SPeDE import_spede_clusters(   system.file(\"spede.csv\", package = \"maldipickr\") ) #> # A tibble: 6 √ó 5 #>   name         membership cluster_size quality is_reference #>   <chr>             <dbl>        <int> <chr>   <lgl>        #> 1 species1_G2           1            1 GREEN   TRUE         #> 2 species2_E11          2            2 ORANGE  FALSE        #> 3 species2_E12          2            2 GREEN   TRUE         #> 4 species3_F7           3            1 GREEN   TRUE         #> 5 species3_F8           4            2 ORANGE  FALSE        #> 6 species3_F9           4            2 GREEN   TRUE"},{"path":"/reference/is_well_on_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","title":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","text":"Identify wells plate's edge","code":""},{"path":"/reference/is_well_on_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","text":"","code":"is_well_on_edge(   well_number,   plate_layout = c(96, 384),   edges = c(\"top\", \"bottom\", \"left\", \"right\"),   details = FALSE )"},{"path":"/reference/is_well_on_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","text":"well_number vector positive numeric well identifier plate_layout integer indicating maximum number well plate edges character vector pointing plate edges considered details logical controlling whether data.frame details returned","code":""},{"path":"/reference/is_well_on_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","text":"logical vector, length well_number indicating whether well edge. details = TRUE, function returns data.frame complements logical vector well_number, row column positions.","code":""},{"path":"/reference/is_well_on_edge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","text":"Flag wells located edges 96- 384-well plate, based following well numbering: Well numbers start 1 Well numbered left right top bottom plate.","code":""},{"path":"/reference/is_well_on_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the wells on the plate's edge ‚Äî is_well_on_edge","text":"","code":"# Logical vector indicating whether the wells are on the four edges is_well_on_edge(1:96, plate_layout = 96) #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #> [13]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [25]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [37]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [49]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [61]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [73]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [85]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE # More details can be obtained to verify the results well_df <- is_well_on_edge(1:96, plate_layout = 96, details = TRUE) # And the resulting prediction displayed matrix(well_df$is_edge, ncol = max(well_df$col), byrow},{"path":"/reference/maldipickr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"maldipickr: Dereplicate And Cherry-pick Mass Spectrometry Spectra ‚Äî maldipickr-package","title":"maldipickr: Dereplicate And Cherry-pick Mass Spectrometry Spectra ‚Äî maldipickr-package","text":"Convenient wrapper functions analysis matrix-assisted laser desorption/ionization-time--flight (MALDI-TOF) spectra data order select representative spectra (aka cherry-pick). package covers preprocessing dereplication steps needed cluster MALDI-TOF spectra final cherry-picking step. package relies heavily 'MALDIquant' package albeit 'tidyverse' flavour.","code":""},{"path":[]},{"path":"/reference/maldipickr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"maldipickr: Dereplicate And Cherry-pick Mass Spectrometry Spectra ‚Äî maldipickr-package","text":"Maintainer: Charlie Pauvert cpauvert@users.noreply.github.com (ORCID)","code":""},{"path":"/reference/merge_processed_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge multiple processed spectra and peaks ‚Äî merge_processed_spectra","title":"Merge multiple processed spectra and peaks ‚Äî merge_processed_spectra","text":"Aggregate multiple processed spectra, associated peaks metadata feature matrix concatenated metadata table.","code":""},{"path":"/reference/merge_processed_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge multiple processed spectra and peaks ‚Äî merge_processed_spectra","text":"","code":"merge_processed_spectra(   processed_spectra,   remove_peakless_spectra = TRUE,   interpolate_missing = TRUE )"},{"path":"/reference/merge_processed_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge multiple processed spectra and peaks ‚Äî merge_processed_spectra","text":"processed_spectra list processed spectra associated peaks metadata two possible formats: list paths RDS files produced process_spectra using rds_prefix option. list -memory objects (named spectra, peaks, metadata) produced process_spectra. remove_peakless_spectra logical indicating whether discard spectra without detected peaks. interpolate_missing logical indicating intensity values missing peaks interpolated processed spectra signal left NA converted 0.","code":""},{"path":"/reference/merge_processed_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge multiple processed spectra and peaks ‚Äî merge_processed_spectra","text":"n√óp matrix, n spectra rows p features columns peaks found processed spectra.","code":""},{"path":[]},{"path":"/reference/merge_processed_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge multiple processed spectra and peaks ‚Äî merge_processed_spectra","text":"","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Transform the spectra signals according to Strejcek et al. (2018) processed <- process_spectra(spectra_list) # Merge the spectra to produce the feature matrix fm <- merge_processed_spectra(list(processed)) # The feature matrix has 6 spectra as rows and #  35 peaks as columns dim(fm) #> [1]  6 35 # Notice the difference when the interpolation is turned off fm_no_interpolation <- merge_processed_spectra(   list(processed),   interpolate_missing = FALSE ) sum(fm == 0) # 0 #> [1] 0 sum(fm_no_interpolation == 0) # 68 #> [1] 68  # Multiple runs can be aggregated using list() # Merge the spectra to produce the feature matrix fm_all <- merge_processed_spectra(list(processed, processed, processed)) # The feature matrix has 3√ó6=18 spectra as rows and #  35 peaks as columns dim(fm_all) #> [1] 18 35"},{"path":"/reference/pick_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Cherry-pick Bruker MALDI Biotyper spectra ‚Äî pick_spectra","title":"Cherry-pick Bruker MALDI Biotyper spectra ‚Äî pick_spectra","text":"Using clusters information, potential additional metadata external criteria, spectra labelled picked cluster. Note spectra therefore clusters can explicitly removed (masked) picking decision previously picked discarded, using logical columns metadata table. metadata provided, reference spectra cluster picked.","code":""},{"path":"/reference/pick_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cherry-pick Bruker MALDI Biotyper spectra ‚Äî pick_spectra","text":"","code":"pick_spectra(   cluster_df,   metadata_df = NULL,   criteria_column = NULL,   hard_mask_column = NULL,   soft_mask_column = NULL,   is_descending_order = TRUE,   is_sorted = FALSE )"},{"path":"/reference/pick_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cherry-pick Bruker MALDI Biotyper spectra ‚Äî pick_spectra","text":"cluster_df tibble clusters information similarity_to_clusters import_spede_clusters function. metadata_df Optional tibble relevant metadata guide picking process (e.g., OD600). criteria_column Optional character indicating column metadata_df used criteria. hard_mask_column Column name cluster_df metadata_df tibble indicating whether spectra, clusters belong discarded (TRUE) (FALSE) picking decision. soft_mask_column Column name cluster_df metadata_df tibble indicating whether spectra discarded (TRUE) (FALSE) picking decision. is_descending_order Optional logical indicating whether sort criteria_column highest--lowest value (TRUE) lowest--highest (FALSE). is_sorted Optional logical indicate cluster_df already sorted cluster based (usually multiple) internal criteria pick first cluster. flag overriden metadata_df provided.","code":""},{"path":"/reference/pick_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cherry-pick Bruker MALDI Biotyper spectra ‚Äî pick_spectra","text":"tibble many rows cluster_df additional logical column named to_pick indicate whether colony associated spectra picked. metadata_df provided, additional columns tibble added returned tibble.","code":""},{"path":[]},{"path":"/reference/pick_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cherry-pick Bruker MALDI Biotyper spectra ‚Äî pick_spectra","text":"","code":"# 0. Load a toy example of a tibble of clusters created by #   the `similarity_to_clusters` function. clusters <- readRDS(   system.file(\"clusters_tibble.RDS\",     package = \"maldipickr\"   ) ) # 1. By default and if no other metadata are provided, #   the function picks reference spectra for each clusters. pick_spectra(clusters) #> # A tibble: 6 √ó 7 #>   name         membership cluster_size   SNR peaks is_reference to_pick #>   <chr>             <int>        <int> <dbl> <dbl> <lgl>        <lgl>   #> 1 species1_G2           1            4  5.09    21 FALSE        FALSE   #> 2 species2_E11          2            2  5.54    22 FALSE        FALSE   #> 3 species2_E12          2            2  5.63    23 TRUE         TRUE    #> 4 species3_F7           1            4  4.89    26 FALSE        FALSE   #> 5 species3_F8           1            4  5.56    25 TRUE         TRUE    #> 6 species3_F9           1            4  5.40    25 FALSE        FALSE    # 2.1 Simulate OD600 values with uniform distribution #  for each of the colonies we measured with #  the Bruker MALDI Biotyper set.seed(104) metadata <- dplyr::transmute(   clusters,   name = name, OD600 = runif(n = nrow(clusters)) ) metadata #> # A tibble: 6 √ó 2 #>   name         OD600 #>   <chr>        <dbl> #> 1 species1_G2  0.364 #> 2 species2_E11 0.772 #> 3 species2_E12 0.735 #> 4 species3_F7  0.973 #> 5 species3_F8  0.740 #> 6 species3_F9  0.201  # 2.2 Pick the spectra based on the highest #   OD600 value per cluster pick_spectra(clusters, metadata, \"OD600\") #> # A tibble: 6 √ó 8 #>   name         membership cluster_size   SNR peaks is_reference OD600 to_pick #>   <chr>             <int>        <int> <dbl> <dbl> <lgl>        <dbl> <lgl>   #> 1 species1_G2           1            4  5.09    21 FALSE        0.364 FALSE   #> 2 species2_E11          2            2  5.54    22 FALSE        0.772 TRUE    #> 3 species2_E12          2            2  5.63    23 TRUE         0.735 FALSE   #> 4 species3_F7           1            4  4.89    26 FALSE        0.973 TRUE    #> 5 species3_F8           1            4  5.56    25 TRUE         0.740 FALSE   #> 6 species3_F9           1            4  5.40    25 FALSE        0.201 FALSE    # 3.1 Say that the wells on the right side of the plate are #   used for negative controls and should not be picked. metadata <- metadata %>% dplyr::mutate(   well = gsub(\".*[A-Z]([0-9]{1,2}$)\", \"\\\\1\", name) %>%     strtoi(),   is_edge = is_well_on_edge(     well_number = well, plate_layout = 96, edges = \"right\"   ) )  # 3.2 Pick the spectra after discarding (or soft masking) #   the spectra indicated by the `is_edge` column. pick_spectra(clusters, metadata, \"OD600\",   soft_mask_column = \"is_edge\" ) #> # A tibble: 6 √ó 10 #>   name      membership cluster_size   SNR peaks is_reference OD600  well is_edge #>   <chr>          <int>        <int> <dbl> <dbl> <lgl>        <dbl> <int> <lgl>   #> 1 species1‚Ä¶          1            4  5.09    21 FALSE        0.364     2 FALSE   #> 2 species2‚Ä¶          2            2  5.54    22 FALSE        0.772    11 FALSE   #> 3 species2‚Ä¶          2            2  5.63    23 TRUE         0.735    12 TRUE    #> 4 species3‚Ä¶          1            4  4.89    26 FALSE        0.973     7 FALSE   #> 5 species3‚Ä¶          1            4  5.56    25 TRUE         0.740     8 FALSE   #> 6 species3‚Ä¶          1            4  5.40    25 FALSE        0.201     9 FALSE   #> # ‚Ñπ 1 more variable: to_pick <lgl>  # 4.1 Say that some spectra were picked before #   (e.g., in the column F) in a previous experiment. # We do not want to pick clusters with those spectra #   included to limit redundancy. metadata <- metadata %>% dplyr::mutate(   picked_before = grepl(\"_F\", name) ) # 4.2 Pick the spectra from clusters without spectra #   labelled as `picked_before` (hard masking). pick_spectra(clusters, metadata, \"OD600\",   hard_mask_column = \"picked_before\" ) #> # A tibble: 6 √ó 11 #>   name      membership cluster_size   SNR peaks is_reference OD600  well is_edge #>   <chr>          <int>        <int> <dbl> <dbl> <lgl>        <dbl> <int> <lgl>   #> 1 species1‚Ä¶          1            4  5.09    21 FALSE        0.364     2 FALSE   #> 2 species2‚Ä¶          2            2  5.54    22 FALSE        0.772    11 FALSE   #> 3 species2‚Ä¶          2            2  5.63    23 TRUE         0.735    12 TRUE    #> 4 species3‚Ä¶          1            4  4.89    26 FALSE        0.973     7 FALSE   #> 5 species3‚Ä¶          1            4  5.56    25 TRUE         0.740     8 FALSE   #> 6 species3‚Ä¶          1            4  5.40    25 FALSE        0.201     9 FALSE   #> # ‚Ñπ 2 more variables: picked_before <lgl>, to_pick <lgl>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/process_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018)","code":""},{"path":"/reference/process_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"","code":"process_spectra(spectra_list, rds_prefix = NULL)"},{"path":"/reference/process_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"spectra_list list MALDIquant::MassSpectrum objects. rds_prefix character indicating prefix .RDS output files written processed directory. default, prefix given thus files written.","code":""},{"path":"/reference/process_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"named list three objects: spectra: list length spectra list MALDIquant::MassSpectrum objects. peaks: list length spectra list MALDIquant::MassPeaks objects. metadata: tibble indicating median signal--noise ratio (SNR) peaks number spectra list (peaks), spectra names name column.","code":""},{"path":"/reference/process_spectra.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"Based original implementation, function performs following tasks: Square-root transformation Mass range trimming 4-10 kDa deemed determinant Strejcek et al. (2018) Signal smoothing using Savitzky-Golay method half window size 20 Baseline correction SNIP procedure Normalisation Total Ion Current Peak detection using SuperSmoother procedure signal--noise ratio 3 Peak filtering. step added discard peaks negative signal--noise ratio probably due edge mass range.","code":""},{"path":"/reference/process_spectra.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"original R code function based accessible : https://github.com/strejcem/MALDIvs16S","code":""},{"path":"/reference/process_spectra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"Strejcek M, Smrhova T, Junkova P & Uhlik O (2018). ‚ÄúWhole-Cell MALDI-TOF MS versus 16S rRNA Gene Analysis Identification Dereplication Recurrent Bacterial Isolates.‚Äù Frontiers Microbiology 9 doi:10.3389/fmicb.2018.01294.","code":""},{"path":[]},{"path":"/reference/process_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Bruker MALDI Biotyper spectra √† la Strejcek et al. (2018) ‚Äî process_spectra","text":"","code":"# Get an example directory of six Bruker MALDI Biotyper spectra directory_biotyper_spectra <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) # Import the six spectra spectra_list <- import_biotyper_spectra(directory_biotyper_spectra) # Transform the spectra signals according to Strejcek et al. (2018) processed <- process_spectra(spectra_list) # Overview of the list architecture that is returned #  with the list of processed spectra, peaks identified and the #  metadata table str(processed, max.level = 2) #> List of 3 #>  $ spectra :List of 6 #>   ..$ species1_G2 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species2_E11:Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species2_E12:Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species3_F7 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species3_F8 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>   ..$ species3_F9 :Formal class 'MassSpectrum' [package \"MALDIquant\"] with 3 slots #>  $ peaks   :List of 6 #>   ..$ species1_G2 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species2_E11:Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species2_E12:Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species3_F7 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species3_F8 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>   ..$ species3_F9 :Formal class 'MassPeaks' [package \"MALDIquant\"] with 4 slots #>  $ metadata: tibble [6 √ó 3] (S3: tbl_df/tbl/data.frame) # A detailed view of the metadata with the median signal-to-noise #  ratio (SNR) and the number of peaks processed$metadata #> # A tibble: 6 √ó 3 #>   name           SNR peaks #>   <chr>        <dbl> <dbl> #> 1 species1_G2   5.09    21 #> 2 species2_E11  5.54    22 #> 3 species2_E12  5.63    23 #> 4 species3_F7   4.89    26 #> 5 species3_F8   5.56    25 #> 6 species3_F9   5.40    25"},{"path":"/reference/read_biotyper_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"headerless table exported Compass software Bruker MALDI Biotyper device separated semi-colons empty columns prevent easy import R. function reads report correctly tibble.","code":""},{"path":"/reference/read_biotyper_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"","code":"read_biotyper_report(path, best_hits = TRUE, long_format = TRUE)"},{"path":"/reference/read_biotyper_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"path Path semi-colon separated table best_hits logical indicating whether return best hits target analyzed long_format logical indicating whether table long format (many rows) wide format (many columns) showing hits. option effect best_hits = TRUE.","code":""},{"path":"/reference/read_biotyper_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"tibble 7 columns (best_hits = TRUE) 52 columns (best_hits = FALSE). See Details description columns.","code":""},{"path":"/reference/read_biotyper_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"headerless table contains identification information target processed Biotyper device processed read_biotyper_report, following seven columns available tibble, using best_hits = TRUE option: spot: integer indicating spot number MALDI target (.e., plate) sample_name: character string provided preparation MALDI target (.e., plate) hit_rank: integer indicating rank hit corresponding target identification bruker_quality: character encoding quality identification potentially multiple \"+\" symbol one \"-\" bruker_species: species name associated MALDI spectrum analyzed. bruker_taxid: NCBI Taxonomy Identifier species name column species bruker_hash: hash undocumented checksum function probably encode database entry. bruker_log: log-score identification. hits returned (best_hits = FALSE), default output format long format (long_format = TRUE), meaning previous columns remain unchanged, hits now returned, thus increasing number rows. hits returned (best_hits = FALSE) using wide format (long_format = FALSE), two columns spotandsample_nameremains unchanged, five columns prefixed bybruker_` contain hit rank, creating tibble 52 columns: bruker_01_quality bruker_01_species bruker_01_taxid bruker_01_hash bruker_01_log bruker_02_quality ... bruker_10_species bruker_10_taxid bruker_10_hash bruker_10_log","code":""},{"path":"/reference/read_biotyper_report.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"report contains spectra peaks found return tibble 0 rows warning message.","code":""},{"path":[]},{"path":"/reference/read_biotyper_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Importing Bruker MALDI Biotyper CSV report ‚Äî read_biotyper_report","text":"","code":"# Get a example Bruker report biotyper <- system.file(\"biotyper.csv\", package = \"maldipickr\") # Import the report as a tibble report_tibble <- read_biotyper_report(biotyper) # Display the tibble report_tibble #> # A tibble: 3 √ó 8 #>   spot    sample_name hit_rank bruker_quality bruker_species        bruker_taxid #>   <chr>   <chr>          <int> <chr>          <chr>                        <dbl> #> 1 targetA NA                 1 -              not reliable identif‚Ä¶           NA #> 2 targetB NA                 1 +++            Escherichia coli               562 #> 3 targetC NA                 1 +++            Kosakonia cowanii           208223 #> # ‚Ñπ 2 more variables: bruker_hash <chr>, bruker_log <dbl>"},{"path":"/reference/read_many_biotyper_reports.html","id":null,"dir":"Reference","previous_headings":"","what":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","title":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","text":"Importing list Bruker MALDI Biotyper CSV reports","code":""},{"path":"/reference/read_many_biotyper_reports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","text":"","code":"read_many_biotyper_reports(path_to_reports, report_ids, best_hits = TRUE, ...)"},{"path":"/reference/read_many_biotyper_reports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","text":"path_to_reports vector paths csv files imported read_biotyper_report(). report_ids vector character names reports. best_hits logical indicating whether return best hit read_biotyper_report() function. ... Name-value pairs passed dplyr::mutate()","code":""},{"path":"/reference/read_many_biotyper_reports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","text":"tibble just like read_biotyper_report() function except additional column name report_ids used prefix spot name.","code":""},{"path":"/reference/read_many_biotyper_reports.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","text":"report identifiers sanitised convert dashes (-) underscores (_).","code":""},{"path":[]},{"path":"/reference/read_many_biotyper_reports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Importing a list of Bruker MALDI Biotyper CSV reports ‚Äî read_many_biotyper_reports","text":"","code":"# List of Bruker MALDI Biotyper reports reports_paths <- system.file(   c(\"biotyper.csv\", \"biotyper.csv\", \"biotyper.csv\"),   package = \"maldipickr\" ) # Read the list of reports and combine them in a single tibble read_many_biotyper_reports(   reports_paths,   report_ids = c(\"first\", \"second\", \"third\"),   # Additional metadata below are passed to dplyr::mutate   growth_temperature = 37.0 ) #> # A tibble: 9 √ó 10 #>   name     spot  sample_name hit_rank bruker_quality bruker_species bruker_taxid #>   <chr>    <chr> <chr>          <int> <chr>          <chr>                 <dbl> #> 1 first_t‚Ä¶ targ‚Ä¶ NA                 1 -              not reliable ‚Ä¶           NA #> 2 first_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Escherichia c‚Ä¶          562 #> 3 first_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Kosakonia cow‚Ä¶       208223 #> 4 second_‚Ä¶ targ‚Ä¶ NA                 1 -              not reliable ‚Ä¶           NA #> 5 second_‚Ä¶ targ‚Ä¶ NA                 1 +++            Escherichia c‚Ä¶          562 #> 6 second_‚Ä¶ targ‚Ä¶ NA                 1 +++            Kosakonia cow‚Ä¶       208223 #> 7 third_t‚Ä¶ targ‚Ä¶ NA                 1 -              not reliable ‚Ä¶           NA #> 8 third_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Escherichia c‚Ä¶          562 #> 9 third_t‚Ä¶ targ‚Ä¶ NA                 1 +++            Kosakonia cow‚Ä¶       208223 #> # ‚Ñπ 3 more variables: bruker_hash <chr>, bruker_log <dbl>, #> #   growth_temperature <dbl>"},{"path":"/reference/set_reference_spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a reference spectrum for each cluster ‚Äî set_reference_spectra","title":"Set a reference spectrum for each cluster ‚Äî set_reference_spectra","text":"Define high-quality spectra representative spectra cluster based highest median signal--noise ratio number detected peaks","code":""},{"path":"/reference/set_reference_spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a reference spectrum for each cluster ‚Äî set_reference_spectra","text":"","code":"set_reference_spectra(cluster_df, metadata_df)"},{"path":"/reference/set_reference_spectra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a reference spectrum for each cluster ‚Äî set_reference_spectra","text":"cluster_df tibble n rows spectra produced similarity_to_clusters function least following columns: name: rownames similarity matrix indicating spectra names membership: integers stating cluster number spectra belong . starts 1 c, total number clusters. cluster_size: integers indicating total number spectra corresponding cluster. metadata_df tibble n rows spectra produced process_spectra function median signal--noise ratio (SNR), peaks number (peaks), spectra names name column.","code":""},{"path":"/reference/set_reference_spectra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a reference spectrum for each cluster ‚Äî set_reference_spectra","text":"merged tibble order cluster_df columns cluster_df metadata_df, well logical column is_reference indicating spectrum reference spectra cluster.","code":""},{"path":[]},{"path":"/reference/set_reference_spectra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set a reference spectrum for each cluster ‚Äî set_reference_spectra","text":"","code":"# Get an example directory of six Bruker MALDI Biotyper spectra # Import the six spectra and # Transform the spectra signals according to Strejcek et al. (2018) processed <- system.file(   \"toy-species-spectra\",   package = \"maldipickr\" ) %>%   import_biotyper_spectra() %>%   suppressMessages() %>%   process_spectra()  # Toy similarity matrix between the six example spectra of #  three species. The cosine metric is used and a value of #  zero indicates dissimilar spectra and a value of one #  indicates identical spectra. cosine_similarity <- matrix(   c(     1, 0.79, 0.77, 0.99, 0.98, 0.98,     0.79, 1, 0.98, 0.79, 0.8, 0.8,     0.77, 0.98, 1, 0.77, 0.77, 0.77,     0.99, 0.79, 0.77, 1, 1, 0.99,     0.98, 0.8, 0.77, 1, 1, 1,     0.98, 0.8, 0.77, 0.99, 1, 1   ),   nrow = 6,   dimnames = list(     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     ),     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     )   ) ) # Delineate clusters based on a 0.92 threshold applied #  to the similarity matrix clusters <- similarity_to_clusters(   cosine_similarity,   threshold = 0.92 )  # Set reference spectra with the toy example set_reference_spectra(clusters, processed$metadata) #> # A tibble: 6 √ó 6 #>   name         membership cluster_size   SNR peaks is_reference #>   <chr>             <int>        <int> <dbl> <dbl> <lgl>        #> 1 species1_G2           1            4  5.09    21 FALSE        #> 2 species2_E11          2            2  5.54    22 FALSE        #> 3 species2_E12          2            2  5.63    23 TRUE         #> 4 species3_F7           1            4  4.89    26 FALSE        #> 5 species3_F8           1            4  5.56    25 TRUE         #> 6 species3_F9           1            4  5.40    25 FALSE"},{"path":"/reference/similarity_to_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","title":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","text":"matrix spectra similarity (e.g., cosine metric, Pearson product moment), infer species clusters based threshold (equal ) spectra considered alike.","code":""},{"path":"/reference/similarity_to_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","text":"","code":"similarity_to_clusters(sim_matrix, threshold)"},{"path":"/reference/similarity_to_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","text":"sim_matrix n√ón similarity matrix, n number spectra. Columns named rows. threshold numeric value indicating minimal similarity two spectra. Adjust accordingly similarity metric used.","code":""},{"path":"/reference/similarity_to_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","text":"tibble n rows spectra 3 columns: name: rownames similarity matrix indicating spectra names membership: integers stating cluster number spectra belong . starts 1 c, total number clusters. cluster_size: integers indicating total number spectra corresponding cluster.","code":""},{"path":"/reference/similarity_to_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","text":"matrix transformed network without loops, nodes spectra links exist spectra similarity spectra threshold. original idea comes StackOverflow answer user ekstroem. However, implementation differs two way: relies connected components network instead fast greedy modularity algorithm. uses tidygraph::tidygraph-package instead igraph::igraph-package stay within tibble tidyverse consistency.","code":""},{"path":[]},{"path":"/reference/similarity_to_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delineate clusters from a similarity matrix ‚Äî similarity_to_clusters","text":"","code":"# Toy similarity matrix between the six example spectra of #  three species. The cosine metric is used and a value of #  zero indicates dissimilar spectra and a value of one #  indicates identical spectra. cosine_similarity <- matrix(   c(     1, 0.79, 0.77, 0.99, 0.98, 0.98,     0.79, 1, 0.98, 0.79, 0.8, 0.8,     0.77, 0.98, 1, 0.77, 0.77, 0.77,     0.99, 0.79, 0.77, 1, 1, 0.99,     0.98, 0.8, 0.77, 1, 1, 1,     0.98, 0.8, 0.77, 0.99, 1, 1   ),   nrow = 6,   dimnames = list(     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     ),     c(       \"species1_G2\", \"species2_E11\", \"species2_E12\",       \"species3_F7\", \"species3_F8\", \"species3_F9\"     )   ) ) # Delineate clusters based on a 0.92 threshold applied #  to the similarity matrix similarity_to_clusters(cosine_similarity, threshold = 0.92) #> # A tibble: 6 √ó 3 #>   name         membership cluster_size #>   <chr>             <int>        <int> #> 1 species1_G2           1            4 #> 2 species2_E11          2            2 #> 3 species2_E12          2            2 #> 4 species3_F7           1            4 #> 5 species3_F8           1            4 #> 6 species3_F9           1            4"},{"path":"/news/index.html","id":"maldipickr-010","dir":"Changelog","previous_headings":"","what":"maldipickr 0.1.0","title":"maldipickr 0.1.0","text":"First stable version","code":""},{"path":"/news/index.html","id":"maldipickr-0009000","dir":"Changelog","previous_headings":"","what":"maldipickr 0.0.0.9000","title":"maldipickr 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
